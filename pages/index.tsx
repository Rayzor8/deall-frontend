import {
  Button,
  Flex,
  Grid,
  GridItem,
  Heading,
  Input,
  Skeleton,
  Stack,
  Table,
  TableContainer,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
} from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchProducts } from "../redux/slices/productSlice";
import { AppDispatch, RootState } from "../redux/store";

export default function Home() {
  const {
    page: { skip, limit, total },
    data,
    loading,
  } = useSelector((state: RootState) => state.products);
  const dispatch = useDispatch<AppDispatch>();

  const [counter, setCounter] = useState(1);
  const perPage = 10;
  const maxPage = total - perPage;

  useEffect(() => {
    dispatch(fetchProducts({ skip: skip, limit: limit }));
  }, [dispatch, skip, limit]);

  function prevPage() {
    if (skip !== 0) {
      dispatch(fetchProducts({ skip: skip - perPage, limit: limit }));
      setCounter((prev) => prev - 1);
    }
  }

  function nextPage() {
    if (skip !== maxPage) {
      dispatch(fetchProducts({ skip: skip + perPage, limit: limit }));
      setCounter((prev) => prev + 1);
    }
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid as="main" gap="4" templateColumns="repeat(5, 1fr)">
        <GridItem colSpan={5}>
          <Heading as="h1" size="lg" noOfLines={1}>
            Product List Page
          </Heading>
        </GridItem>

        <GridItem colStart={5}>
          <Input
            placeholder="Search Product"
            maxW="500px"
            border="2px"
            borderColor="gray.300"
            shadow="sm"
          />
        </GridItem>

        <GridItem colSpan={5}>
          {!loading ? (
            <TableContainer
              border="2px"
              borderColor="gray.300"
              rounded="sm"
              shadow="sm"
            >
              <Table variant="striped">
                <Thead borderBottom="2px" borderColor="gray.300">
                  <Tr>
                    <Th>Product Name</Th>
                    <Th>Brand</Th>
                    <Th>Price</Th>
                    <Th>Stock</Th>
                    <Th>Category</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {data?.products.map((product) => (
                    <Tr key={product.id}>
                      <Td>{product.title}</Td>
                      <Td>{product.brand}</Td>
                      <Td>{product.price}</Td>
                      <Td>{product.stock}</Td>
                      <Td>{product.category}</Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </TableContainer>
          ) : (
            <Stack>
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
              <Skeleton height="40px" />
            </Stack>
          )}
        </GridItem>

        <GridItem colStart={5}>
          <Flex gap={2}>
            <Button colorScheme="gray" shadow="sm" onClick={prevPage}>
              Prev
            </Button>

            <Text sx={{ margin: "auto 0" }} w="20">
              {counter} / {total / perPage}
            </Text>

            <Button colorScheme="gray" shadow="sm" onClick={nextPage}>
              Next
            </Button>
          </Flex>
        </GridItem>
      </Grid>
    </div>
  );
}
