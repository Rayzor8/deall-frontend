import {
  Grid,
  GridItem,
  Heading,
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Tfoot,
  Th,
  Thead,
  Tr,
} from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useMemo } from "react";
import { useDispatch, useSelector } from "react-redux";
import ChartProducts from "../components/ChartProducts";
import InputSearch from "../components/InputSearch";
import Pagination from "../components/Pagination";
import SkeletonLoader from "../components/SkeletonLoader";
import {
  counterDecrement,
  counterIncrement,
  fetchProducts,
} from "../redux/slices/productSlice";
import { AppDispatch, RootState } from "../redux/store";
import { ProductsItem } from "../types";

export default function Home() {
  const {
    page: { skip, limit, total },
    data,
    loading,
    searchQuery,
    counter,
  } = useSelector((state: RootState) => state.products);
  const dispatch = useDispatch<AppDispatch>();

  const perPage = 10;
  const maxPage = total - perPage;

  useEffect(() => {
    dispatch(fetchProducts({ skip: skip, limit: limit }));
  }, [dispatch, skip, limit]);

  function prevPage() {
    if (skip !== 0) {
      dispatch(fetchProducts({ skip: skip - perPage, limit: limit }));
      dispatch(counterDecrement());
    }
  }

  function nextPage() {
    if (skip !== maxPage) {
      dispatch(fetchProducts({ skip: skip + perPage, limit: limit }));
      dispatch(counterIncrement());
    }
  }

  const filteredItems = useMemo(() => {
    return data?.products.filter((product: ProductsItem) => {
      if (searchQuery) {
        return (
          product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.brand.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.price.toString().toLowerCase().includes(searchQuery) ||
          product.category.toLowerCase().includes(searchQuery.toLowerCase())
        );
      } else {
        return data;
      }
    });
  }, [data, searchQuery]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid as="main" gap="4" templateColumns="repeat(5, 1fr)">
        <GridItem colSpan={5}>
          <Heading as="h1" size="lg" noOfLines={1}>
            Product List Page
          </Heading>
        </GridItem>

        <GridItem colSpan={5}>
          <ChartProducts />
        </GridItem>

        <GridItem colStart={5}>
          <InputSearch />
        </GridItem>

        <GridItem colSpan={5}>
          {!loading ? (
            <TableContainer
              border="2px"
              borderColor="gray.300"
              rounded="sm"
              shadow="sm"
            >
              <Table variant="striped">
                <Thead borderBottom="2px" borderColor="gray.300">
                  <Tr>
                    <Th>Product Name</Th>
                    <Th>Brand</Th>
                    <Th>Price</Th>
                    <Th>Stock</Th>
                    <Th>Category</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {filteredItems?.map((product) => (
                    <Tr key={product.id}>
                      <Td>{product.title}</Td>
                      <Td>{product.brand}</Td>
                      <Td>$ {product.price}</Td>
                      <Td>{product.stock}</Td>
                      <Td>{product.category}</Td>
                    </Tr>
                  ))}
                </Tbody>
                {!filteredItems?.length && (
                  <TableCaption>No search results found</TableCaption>
                )}
              </Table>
            </TableContainer>
          ) : (
            <SkeletonLoader length={12} width="full" />
          )}
        </GridItem>

        <GridItem colStart={5}>
          <Pagination
            loading={loading}
            total={total}
            perPage={perPage}
            prevPage={prevPage}
            nextPage={nextPage}
            counter={counter}
            skip={skip}
          />
        </GridItem>
      </Grid>
    </div>
  );
}
